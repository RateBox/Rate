#!/usr/bin/env pwsh

# Auto Build and Test Script cho Smart Component Filter Plugin
# Ch·∫°y t·ª´ project root: .\scripts\auto-build-and-test.ps1

Write-Host "üöÄ Starting Auto Build and Test Workflow" -ForegroundColor Green

# Set working directory to project root
Set-Location "D:\Projects\JOY\Rate"

# Step 1: Build Smart Component Filter Plugin
Write-Host "`nüì¶ Building Smart Component Filter Plugin..." -ForegroundColor Yellow
Set-Location "apps\strapi\src\plugins\smart-component-filter"

try {
    yarn build
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Plugin build successful!" -ForegroundColor Green
    }
    else {
        throw "Plugin build failed"
    }
}
catch {
    Write-Host "‚ùå Plugin build failed: $_" -ForegroundColor Red
    exit 1
}

# Go back to project root
Set-Location "D:\Projects\JOY\Rate"

# Step 2: Ki·ªÉm tra Strapi c√≥ ƒëang ch·∫°y kh√¥ng
Write-Host "`nüîç Checking Strapi server status..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:1337/admin" -Method HEAD -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Strapi is running on localhost:1337" -ForegroundColor Green
    }
}
catch {
    Write-Host "‚ö†Ô∏è Strapi not running, starting it..." -ForegroundColor Yellow
    
    # Kill any existing process on port 1337
    $processes = netstat -ano | Select-String ":1337"
    if ($processes) {
        Write-Host "üî™ Killing existing processes on port 1337..."
        $processes | ForEach-Object {
            $processId = ($_ -split "\s+")[-1]
            Stop-Process -Id $processId -Force -ErrorAction SilentlyContinue
        }
    }
    
    # Start Strapi in background
    Write-Host "üöÄ Starting Strapi..."
    Start-Process -FilePath "yarn" -ArgumentList "workspace", "@repo/strapi", "develop" -WindowStyle Hidden
    
    # Wait for Strapi to start
    Write-Host "‚è≥ Waiting for Strapi to start..."
    $timeout = 60
    $elapsed = 0
    do {
        Start-Sleep 2
        $elapsed += 2
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:1337/admin" -Method HEAD -TimeoutSec 3
            if ($response.StatusCode -eq 200) {
                Write-Host "‚úÖ Strapi started successfully!" -ForegroundColor Green
                break
            }
        }
        catch {
            # Continue waiting
        }
    } while ($elapsed -lt $timeout)
    
    if ($elapsed -ge $timeout) {
        Write-Host "‚ùå Strapi failed to start within $timeout seconds" -ForegroundColor Red
        exit 1
    }
}

# Step 3: Ki·ªÉm tra MCP Playwright Server
Write-Host "`nüé≠ Checking MCP Playwright server..." -ForegroundColor Yellow
$mcpRunning = netstat -an | Select-String ":8931"
if (-not $mcpRunning) {
    Write-Host "‚ö†Ô∏è MCP Playwright server not running, starting it..." -ForegroundColor Yellow
    Start-Process -FilePath "npx" -ArgumentList "@playwright/mcp@latest", "--port", "8931", "--config", "D:\Projects\JOY\Rate\playwright-mcp-config.json" -WindowStyle Hidden
    Start-Sleep 5
}
else {
    Write-Host "‚úÖ MCP Playwright server is running on port 8931" -ForegroundColor Green
}

# Step 4: Ch·∫°y automated test
Write-Host "`nüß™ Running automated tests..." -ForegroundColor Yellow

try {
    # Ch·∫°y test v·ªõi Playwright
    npx playwright test Test/auto-test-smart-component-filter.js --headed --reporter=list
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "`nüéâ All tests passed successfully!" -ForegroundColor Green
    }
    else {
        Write-Host "`n‚ö†Ô∏è Some tests failed, check output above" -ForegroundColor Yellow
    }
}
catch {
    Write-Host "`n‚ùå Test execution failed: $_" -ForegroundColor Red
}

# Step 5: Generate test report
Write-Host "`nüìä Generating test report..." -ForegroundColor Yellow
$timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
$reportFile = "Test\test-report-$timestamp.md"

$report = @"
# Smart Component Filter Plugin Test Report
**Generated:** $(Get-Date)
**Plugin Version:** v2.1.0
**Strapi Status:** ‚úÖ Running on localhost:1337
**MCP Playwright:** ‚úÖ Running on port 8931

## Test Results
- Plugin Build: ‚úÖ Successful
- Strapi Connection: ‚úÖ Connected
- MCP Playwright: ‚úÖ Available
- Automated Test: See console output above

## Next Steps
1. Manual verification trong Strapi Admin
2. Test v·ªõi real data
3. Performance testing n·∫øu c·∫ßn

---
*Auto-generated by build-and-test script*
"@

$report | Out-File -FilePath $reportFile -Encoding UTF8
Write-Host "üìù Test report saved to: $reportFile" -ForegroundColor Green

Write-Host "`nüèÅ Auto Build and Test Workflow completed!" -ForegroundColor Green
Write-Host "üìä Summary:" -ForegroundColor Cyan
Write-Host "  - Plugin built successfully" -ForegroundColor White
Write-Host "  - Strapi running on localhost:1337" -ForegroundColor White
Write-Host "  - MCP Playwright available for testing" -ForegroundColor White
Write-Host "  - Automated tests executed" -ForegroundColor White
Write-Host "`nüîó Open http://localhost:1337/admin to test manually" -ForegroundColor Blue 